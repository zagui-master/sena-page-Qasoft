/** @format */

// Generated by CodiumAI

/*
Code Analysis

Objective:
The objective of the 'login' function is to authenticate the user's email and password, and redirect them to the appropriate page based on their account type (user or admin).

Inputs:
- email: a string representing the user's email address
- password: a string representing the user's password
- alertPassword: a DOM element representing the alert message for incorrect passwords
- admin: an array of objects representing the admin accounts

Flow:
1. The function calls the 'getUserAccount' function to retrieve the user accounts from the session storage.
2. The function searches for the user account with the input email using the 'find' method.
3. The function searches for the admin account with the input email using the 'find' method.
4. If a user account is found and the input password matches the account password, the function sets the current user in the session storage, resets the login form, opens the courses page in a new tab, and closes the login page.
5. If an admin account is found and the input password matches the account password, the function sets the current user in the session storage, opens the admin page in a new tab, and closes the login page.
6. If neither a user nor an admin account is found or the input password does not match the account password, the function calls the 'handleIncorrectPassword' function to display an alert message.

Outputs:
- None

Additional aspects:
- The function uses the 'sessionStorage' API to store and retrieve user account information.
- The function uses the 'window' object to open and close browser tabs.
- The function calls the 'handleIncorrectPassword' function to display an alert message for incorrect passwords.
*/

describe("login_function", () => {
  // Tests that a user can successfully log in with correct email and password.
  it("test_happy_path_user_login", () => {
    const email = "sergio admin";
    const password = "masterpass";
    const alertPassword = document.createElement("div");
    const admin = [];

    const form = {
      reset: jest.fn(),
    };

    const sessionStorageMock = (() => {
      let store = {};
      return {
        getItem: (key) => store[key],
        setItem: (key, value) => (store[key] = value),
        clear: () => (store = {}),
      };
    })();

    Object.defineProperty(window, "sessionStorage", {
      value: sessionStorageMock,
    });

    const getUserAccountMock = jest.fn(() => [
      { email: email, password: password },
    ]);
    const handleIncorrectPasswordMock = jest.fn();

    login(email, password, alertPassword, admin);

    expect(getUserAccountMock).toHaveBeenCalled();
    expect(form.reset).toHaveBeenCalled();
    expect(sessionStorage.getItem("current_user")).toEqual(
      JSON.stringify(email)
    );
  });

  // Tests that an error message is displayed when user enters empty email or password.
  it("test_edge_case_empty_fields", () => {
    const email = "";
    const password = "";
    const alertPassword = document.createElement("div");
    const admin = [];

    const form = {
      reset: jest.fn(),
    };

    const getUserAccountMock = jest.fn(() => []);
    const handleIncorrectPasswordMock = jest.fn();

    login(email, password, alertPassword, admin);

    expect(getUserAccountMock).toHaveBeenCalled();
    expect(form.reset).not.toHaveBeenCalled();
    expect(handleIncorrectPasswordMock).toHaveBeenCalled();
  });

  // Tests that an error message is displayed when admin enters incorrect email.
  it("test_edge_case_incorrect_admin_email", () => {
    const email = "testadmin@test.com";
    const password = "testpassword";
    const alertPassword = document.createElement("div");
    const admin = [{ account: "admin@test.com", password: "adminpassword" }];

    const form = {
      reset: jest.fn(),
    };

    const getUserAccountMock = jest.fn(() => []);
    const handleIncorrectPasswordMock = jest.fn();

    login(email, password, alertPassword, admin);

    expect(getUserAccountMock).toHaveBeenCalled();
    expect(form.reset).not.toHaveBeenCalled();
    expect(handleIncorrectPasswordMock).toHaveBeenCalled();
  });

  // Tests that an error message is displayed when user enters incorrect email.
  it("test_edge_case_incorrect_user_email", () => {
    const email = "incorrect_email@test.com";
    const password = "password";
    const alertPassword = document.createElement("div");
    const admin = [];

    login(email, password, alertPassword, admin);

    expect(alertPassword.classList.contains("alert-text")).toBe(true);
    expect(alertPassword.textContent).toBe("Incorrect password");
    expect(password.classList.contains("alert-input")).toBe(true);
  });

  // Tests that an error message is displayed when user or admin enters incorrect password.
  it("test_edge_case_incorrect_password", () => {
    const email = "sergio admin";
    const password = "incorrect_password";
    const alertPassword = document.createElement("div");
    const admin = [];

    const userAccount = {
      email: "test@test.com",
      password: "password",
    };

    sessionStorage.setItem("account", JSON.stringify([userAccount]));

    login(email, password, alertPassword, admin);

    expect(alertPassword.classList.contains("alert-text")).toBe(true);
    expect(alertPassword.textContent).toBe("Incorrect password");
    expect(password.classList.contains("alert-input")).toBe(true);
  });

  // Tests that the form is reset on successful login.
  it("test_general_behavior_reset_form", () => {
    const email = "test@test.com";
    const password = "password";
    const alertPassword = document.createElement("div");
    const admin = [];

    const userAccount = {
      email: "test@test.com",
      password: "password",
    };

    sessionStorage.setItem("account", JSON.stringify([userAccount]));

    const form = document.createElement("form");
    form.reset = jest.fn();

    global.window.open = jest.fn();
    global.window.close = jest.fn();

    login(email, password, alertPassword, admin);

    expect(form.reset).toHaveBeenCalled();
    expect(global.window.open).toHaveBeenCalledWith(url.courses, "_blank");
    expect(global.window.close).toHaveBeenCalled();
  });
});
